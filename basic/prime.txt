朴素筛法  O(n loglog n)
int a[N];//利用数组的下标记录要判断的数字
void is_sushu()
{
    memset(a,0,sizeof(a));//对数组a进行初始化为0，不是素数的标记为1，剩下为0的就是素数了
    a[1]=1;//1既不是素数也不是合数，先标记为0
    for(int i=2; i<=sqrt(N); i++)
    {
        if(a[i]==0)//如果i是素数
        {
            for(int j=2; j*i<=N; j++) //循环标记的范围是i*j<N
            {
                a[i*j]=1;//如果i是素数，那么i*j肯定不是素数
            }
        }
    }//最终所有非素数都标记为1，素数都标记为0
}
（每个合数计算它的质因数次）

euler筛法
明确：任何一个合数都是由一个素数序列相乘
利用每个合数必有一个最小素因子，每个合数仅被它的最小素因子筛去正好一次。所以为线性时间。

bool IsPrime[1000010];  
int Prim[1000010];  
int  euler_prime(int n){  
    int num = 0, j;  
    for(int i = 2; i <= n; i ++){  
        if(!IsPrime[i])  
            Prim[num ++] = i;  //记录质数
        for(j  = 0; j < num; j ++){  
            if(i * Prim[j] > n)  
                break;  
            IsPrime[i * Prim[j]] = true;  //筛
            if(i % Prim[j] == 0)  
                break;  //i可以看做prime[j]*某个数， i*prime[j+1]就可以看做 prime[j]*某个数*prime[j+1] 。而 prime[j] 必定小于 prime[j+1]，所以 i*prime[j+1] 必定已经被 prime[j]*某个数 筛掉，就不用再做了（等到i=6即最大合因子时会筛掉）
        }  
    }  