1.数形结合
uva1451
思路：枚举点t，寻找满足条件的点t'；
计sum[i]为前i项合，平均值即为sum[t]-sum[t'-1]/t-t'+1
设（Pi=(i,Si），表示点在s中的位置，那么就可以画出坐标图，问题就转化为斜率最大；
于是画图分析。
几个点之间只有凸下凸两种情况，取3个点为符合条件（t-t'>=L）的t'，分析后得结论上凸点在各种情况（t）下都要舍去；
于是就可以不断更新，更新策略为新插入点，删除掉原来是下凸点，插入后变成上凸点的点；
随着t增大，t'只会增大（t增大，pt增大），所以增加到斜率变小时即可停止;
而且对于某个Pt，选好切点后，对于之后的Pt，之前的点Pt'都不会用到了，于是不用从头枚举


2.uva714      套路：最大值最小，转化为都不超过x，则判断P（x）是否能成立即可（二分取x）（R为tot，L为maxp）（每次尽量向右取）（对于每一个x，在串中从右向左取，看最后的个数大于小于还是等于k（lrj的代码从左向右感觉不太好，因为输出时判断的和对x能否成立的判断不一样））（输出时从右向左，S(K)尽量大，依次类推，使S(1)尽量小，注意判断剩下的数要满足组成k个串）   

3.uva10954 优先队列，huffman编码； 先用几个数试了一下，发现从小的开始删结果最小（没有证明）
注意优先队列的 >   >之间的空

4.uva12627 递推  递归 （输出ll 用了%d错了一次）

5.uva11093 思维，直接枚举；p->p+1挺了，那么从p+1再开始枚举；  i=（i+1）%n

6.uva1607 二分判断  0000x11111，x的位置；先判断输出时常量还是与x有关

7.uva12174  尺取+预处理。
注意理解题意，不是排列种类，而是下一个排序出现的时间
滑动窗口，具体见代码（紫书的思路1理解有点麻烦...）
注：可以画一个轴来方便理解

8.uva1608  
某个序列找到唯一元素后，判断被分成的两边的序列即可
问题在于找到唯一元素
连续序列，重复元素的问题；感觉很有一般性  查找相同元素用map，last，next存上一个相同元素的位置
复杂度计算有点思考；
记录last，next，那么对于一个元素，判断是否独立O（1）
从头开始查找，最坏情况T（n）=T（n-1）+O（n）（O（n）是从头判断到尾） =O（n^2）
两边开始T（n）=2T（n/2）+O（n）=T（nlogn）

9.uva1609 思维   创造条件使一轮比赛之后仍满足1号打败至少一半，并剩下至少一个t'
阶段1,3保证黑色至少消灭1半

10.uva1442连通器
向左向右扫描两次即可
每一段有水的连通区域，高度必须相同，且不超过最低天花板高度
if(p[i] > level) level = p[i];  被隔断，要上升（隔断后，之前的就不变了，之后的从p【i】开始）
      if(s[i] < level) level = s[i];   
      h[i] = level;
左右分别扫描一次，可以满足条件，取从左向右的h[i]和从右向左的level的min
ans += min(h[i], level) - p[i];

11.uva1610 注意vector<string>是可以直接sort的！
str可以相加，所以有ans+=‘A’

12.uva12545
首先根据题意，既然0能变1，问号能变任何。那么不能变成T串的情况只能是S串中的1大于T串中1的个数。


然后考虑能够成为T串的情况。首先，不相同的0和不相同的1首先进行置换，因为这样置换只需进行一次操作，比其它任何情况都优。
交换次数为diff0 diff1中小的那个次，之后借由?再有2*(diff0 - diff1)次操作(先变再换)，剩下的?变成对应的
不管是全剩1还是全剩0最终都是要进行每个两次操作。 最后的que-(diff0 - diff1)代表剩余的问号要进行的操作

13.uva11491
边读入边处理  优化了速度
stringstream 的问题在于他把字符串连续的数字作为一个整体，遇到空格才分开，所以不适用
s.length（）

14.uva1611 类似煎饼，先把1放到1，之后是子问题   （先放到前一半，再放到开头，两次操作）（任何位置，最多一次就可以放到前一半））

15.uva11925 逆序做，逆序输出   经典的构造；经典的逆序
 ans.push_back(2);
                a.insert(a.begin(),a[n-1]);
                a.erase(a.end()-1);
   a.push_back(k);
vector 的操作
没有证明这样做的复杂度要求

16.uva1612  不超过1000，两位小数，可以先*100.0，最后输出/100.0就可以减少误差

因为一共只有三道题，所以每个人的得分最多有8种可能性。把这8种可能性都算出来，存在数组里，排好序备用
排名就是一个天然的链表，给出了扫描的顺序
扫描时，维护两个变量：前一个player的最大得分 recd 和他的ID recdID
扫描到每个player时，从大到小遍历他的8种得分，如果有等于recd的得分，且这个player的ID大于recdID，则只需更新recdID。否则遇到第一个小于recd的得分，就更新recd和recdID。
如果在遍历完8种得分后，还没有满足上面两种情况的，则说明无解

tmp_i[j] = (int)(round(tmp_f[j] * 100.0)); //注意转换

 位运算： if(j & (1 << k))   取j从右向左第k+1位

            for(int j = 0; j < 8; j++) {         //对应3个值取不取的8种情况（111,110,101...）
                P[i].score[j] = 0;
                for(int k = 0; k < 3; k++)
                    if(j & (1 << k)) 
                        P[i].score[j] += tmp_i[k]; 
            }
            sort(P[i].score, P[i].score + 8);

17.uva1613
题目要求k>=最大度数；
观察，颜色数量和度数的关系，得颜色数=最大度数+1（偶数）//最大度数（奇数）  可以满足染色关系
一个点和周围的点的颜色数加起来最大为它的度数+1；
　k=所有点中最大的度。如果最大入度是偶数，则k+1。
证明：当最大度数为奇数n，设点u所连n个点，点u为1，n-1个点不一样，1个点和某个点相同（2-n），那么其他n-1个点可以相连，度数n-2+1=n-1，如果再连这个相同点，度数为n；然而此时一共有n+1个点，为偶数，所以要再加一个点
如果加到这个点（新的n），最大度数改变，不可以；加到其他点，也不能超过n，所以一定有两个点没有直接相连，交换没有直接相连的点和（新的n那个点），就满足了条件
策略：dfs

k = (max(deg+1,deg+1+n))|1;
while（~i）就是while（i！=-1）

18.uva1614 
贪心部分的理论依据：前i个数可以凑出1～sum[i]的所有整数。

证明：第二类数学归纳，n=1时成立，假设n=k之前所有项都成立，当n=k+1时。sum[k+1]=sum[k]+a[k+1]。
只需证明能凑出sum[k]+1~sum[k+1]间的整数即可。设1≤p≤a[k+1]，sum[k]+p=sum[k]+a[k+1]-(a[k+1]-p)。
因为1≤a[i]≤i，易得sum[k]≥k,a[k+1]-p≤k。又因为已知前k个数可以凑出1~sum[k]，所以一定可以凑出a[k+1]-p。
所以只需从之前凑出sum[k]里面剪掉凑出a[k+1]-p的数就可以凑出sum[k]+p。所以从1~sum[k+1]都可以凑出。

实现就是输入时存一下sum，若为奇数就无解，否则再排个序，从大到小扫一遍，选凑成和为sum/2的数的符号为+，其余为-。

先排序，从大到小减（不然会多减小的）

注意sum 用 ll

19.uva1615  画图，每个给出点都有对应区间；先sort，再尽量靠右选；很常见的套路了..//注意不要越界（0，L）

struct Q  //复习结构的定义
{
    double l,r;
    Q(double _l,double _r):l(_l),r(_r){}
    bool operator < (const Q &a) const {
        return r<a.r;
    }
};

20.uva1153 贪心加优先队列   （默认是小的在前，正好） 

//这里又很套路，设队列里的都是符合条件的考虑新加入的即可。再处理一下空队列的情况。很完美//

截止时间短的在前面，干的就多
先根据截止日期排序
优先队列根据完成所需时间排序
首先队列里的都是能完成的
策略：新加入的，如果在前面的完成后仍能完成，就直接加进去；不能，因为截止日期在更后，不影响其他的，比较top元素用的时间，更短就换掉（此时因为截止日期靠后，用的时间还短，所以能成立）

21.uva10570  先证明把每次i放到i位置最后次数最少：感觉，可以，用归纳法？

//在序列后再加一个相同的序列，就可以模拟用各个数字开头的情况了
每个位置不对的只需要换一次
54123 ，5固定->41235变成12345

任何一个数固定不变，都相当于从这种情况对应的1所在的位置开始排一遍12345.（例如54123 ，5固定->41235变成12345）所以只需要每个位置开始都判断变成12345所需步数即可

把输入倒过来看，变成12345就相当于正着变成54321 （这个对称很巧妙啊），可以模块化

22.uva11536 尺取
就是尺取...

23.uva1619
   int t=0;
    while(scanf("%d",&n)==1){
        if(t)
            printf("\n");   //有点方便

单调队列用deque很方便
 for(int i=1;i<=n;i++){    维护单调队列
        while(!q.empty()&&a[i]<=a[q.back()]){
            R[q.back()]=i-1;
            q.pop_back();
        }
        if(q.empty())L[i]=1;
        else L[i]=q.back()+1;
        q.push_back(i);
      }
      while(!q.empty()){
        R[q.back()]=n;
        q.pop_back();
      }

24.uva10366
每次找到两边离中心最高的板，如果等，再找外围的最高版...
画图便于理解
两边先找到距离（-1，1）最近的最大值L和R，因为可能存在多个最高的挡板。
接着比较两个L和R的大小，相等的话分别分析两边，取最小值
注意L和R一边高的话两边都会流，所以这块的时间要乘2。
比如分析右边，从最外围开始，顶部画平行线往内部走，就发现分成了几个区间，加起来就可以了。
L，R不等的话，（这里出现了一个坑），高的那边可能有比低的那边高的其他边;然后又有一个坑，可能找到的边和低的那个边等高
25.uva12265 
见紫书。
（c，h）的更新策略：//前面的高度为0了，直接插入
因为ans==-c+h，c大，h还小，那么肯定不是最优左上角，更新新加入列的列
//新的一列高度最小，就删掉了其他的，只留这个高度
从上到下，从左到右扫描一遍