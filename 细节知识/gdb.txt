文本界面的调试器
在gcc编译时加上-g选项
 
生成test.exe文件后，执行gdb test.exe

l  显示源代码（10行）   l 15（显示15的前面5行+后四行） l -显示当前最先显示行的前十行

help显示帮助，也可以如help list help stack

r运行程序
b设置断点 b main在main函数开始处加断点，用c继续（而不是r） b可以指定行号和函数开头
n执行当前行（s也是）  区别n将函数视为整体，s进入函数内部
u执行至指定行 如u 9，或u main
在提示符下直接按ENTER，会执行上一条命令（如s）
p显示变量，表达式值
i lo（info local）显示所有局部变量，还有 i b显示断点，i disp显示display
disp程序停止时显示变量和表达式
cl 类似b，清除断点，cl清除所有断点
delete disp（d disp）删除disp，（dis disp） en disp暂时禁止或回恢复   b也可以类似操作

q退出

其他cond，ig。。。另行学习

bt 查看调用栈
#0为当前栈帧#1为“上一个”
使用up 选择上一个栈帧

gdb显示SIGSEGV 说明段错误
编译后产生的可执行文件包含内容，与操作系统有关。UNIX\Linux ELF，DOS COFF，Win PE。
段（segmentation）指二进制文件内的区域，size（命令行）程序可以得到可执行文件中各个段的大小。
text正文段储存指令，data数据段储存已经初始化的全局变量，bss段储存未赋值的全局变量 。dec总大小。hex以16进制表示。
可执行文件运行时调用栈，所在段才被创建。所在堆栈段也有大小，不能越界访问。若总是增加栈帧，就会越界。称为栈溢出。也有可能与局部变量太大有关。
栈空间大小与系统有关。